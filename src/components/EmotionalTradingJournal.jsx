import React, { useState, useEffect, useCallback } from 'react';
import { useTheme } from '../hooks/useTheme';
import { useTypography } from '../hooks/useTypography';
import { useLocalStorage } from '../hooks/useLocalStorage';
import ChaessaemCharacter from './ChaessaemCharacter';

// Í∞êÏ†ï Ïπ¥ÌÖåÍ≥†Î¶¨
const EMOTIONS = {
  FEAR: { id: 'fear', name: 'üò® ÎëêÎ†§ÏõÄ', color: '#FF6B6B', intensity: [1, 2, 3, 4, 5] },
  GREED: { id: 'greed', name: 'ü§ë ÌÉêÏöï', color: '#FF9F43', intensity: [1, 2, 3, 4, 5] },
  FOMO: { id: 'fomo', name: 'üò∞ FOMO', color: '#FF6348', intensity: [1, 2, 3, 4, 5] },
  CONFIDENCE: { id: 'confidence', name: 'üòé ÏûêÏã†Í∞ê', color: '#2ECC71', intensity: [1, 2, 3, 4, 5] },
  ANXIETY: { id: 'anxiety', name: 'üòü Î∂àÏïà', color: '#E74C3C', intensity: [1, 2, 3, 4, 5] },
  EXCITEMENT: { id: 'excitement', name: 'ü§© Ìù•Î∂Ñ', color: '#F39C12', intensity: [1, 2, 3, 4, 5] },
  REGRET: { id: 'regret', name: 'üòî ÌõÑÌöå', color: '#9B59B6', intensity: [1, 2, 3, 4, 5] },
  CALM: { id: 'calm', name: 'üòå ÎÉâÏ†ï', color: '#3498DB', intensity: [1, 2, 3, 4, 5] }
};

// Í±∞Îûò ÌÉÄÏûÖ
const TRADE_TYPES = {
  BUY: { id: 'buy', name: 'Îß§Ïàò', icon: 'üìà', color: '#2ECC71' },
  SELL: { id: 'sell', name: 'Îß§ÎèÑ', icon: 'üìâ', color: '#E74C3C' },
  HOLD: { id: 'hold', name: 'ÌôÄÎî©', icon: 'ü§ù', color: '#F39C12' },
  WATCH: { id: 'watch', name: 'Í¥ÄÎßù', icon: 'üëÄ', color: '#3498DB' }
};

// Î©îÌÉÄÏù∏ÏßÄ Ìï≠Î™©
const METACOGNITION_FIELDS = {
  CONFIDENCE_LEVEL: {
    id: 'confidence_level',
    name: 'ÌôïÏã†ÎèÑ',
    type: 'range',
    min: 1,
    max: 10,
    description: 'Ïù¥ Í±∞ÎûòÏóê ÎåÄÌïú ÌôïÏã† Ï†ïÎèÑ (1-10)'
  },
  EXTERNAL_INFLUENCE: {
    id: 'external_influence',
    name: 'Ïô∏Î∂Ä ÏòÅÌñ•ÎèÑ',
    type: 'range',
    min: 1,
    max: 10,
    description: 'Ïô∏Î∂Ä Ï†ïÎ≥¥/ÏùòÍ≤¨Ïù¥ Í≤∞Ï†ïÏóê ÎØ∏Ïπú ÏòÅÌñ• (1-10)'
  },
  EXPECTED_RESULT: {
    id: 'expected_result',
    name: 'ÏòàÏÉÅ Í≤∞Í≥º',
    type: 'select',
    options: ['Îß§Ïö∞ Í∏çÏ†ïÏ†Å', 'Í∏çÏ†ïÏ†Å', 'Î≥¥ÌÜµ', 'Î∂ÄÏ†ïÏ†Å', 'Îß§Ïö∞ Î∂ÄÏ†ïÏ†Å'],
    description: 'Ïù¥ Í±∞ÎûòÏùò ÏòàÏÉÅ Í≤∞Í≥º'
  },
  MARKET_STATE: {
    id: 'market_state',
    name: 'ÏãúÏû• ÏÉÅÌÉú Ïù∏Ïãù',
    type: 'select',
    options: ['Í∞ïÏÑ∏Ïû•', 'ÏïΩÏÑ∏Ïû•', 'Ìö°Î≥¥Ïû•', 'Î≥ÄÎèôÏÑ± ÎÜíÏùå', 'Î∂àÌôïÏã§'],
    description: 'Í±∞Îûò ÎãπÏãú ÏãúÏû• ÏÉÅÌÉúÏóê ÎåÄÌïú Ïù∏Ïãù'
  },
  PAST_COMPARISON: {
    id: 'past_comparison',
    name: 'Í≥ºÍ±∞ Í≤ΩÌóò ÎπÑÍµê',
    type: 'textarea',
    description: 'ÎπÑÏä∑Ìïú Í≥ºÍ±∞ Í≤ΩÌóòÍ≥º ÎπÑÍµê'
  },
  EMOTION_SOURCE: {
    id: 'emotion_source',
    name: 'Í∞êÏ†ï ÏõêÏù∏',
    type: 'textarea',
    description: 'ÌòÑÏû¨ Í∞êÏ†ïÏùò Íµ¨Ï≤¥Ï†Å ÏõêÏù∏'
  }
};

const EmotionalTradingJournal = ({ darkMode = false }) => {
  const theme = useTheme(darkMode);
  const typography = useTypography(darkMode);
  
  const [tradingRecords, setTradingRecords] = useLocalStorage('trading_records', []);
  const [isRecording, setIsRecording] = useState(false);
  const [currentRecord, setCurrentRecord] = useState({
    id: null,
    timestamp: new Date(),
    symbol: '',
    action: '',
    emotion: '',
    emotionIntensity: 3,
    price: '',
    quantity: '',
    reasoning: '',
    metacognition: {
      confidence_level: 5,
      external_influence: 5,
      expected_result: 'Î≥¥ÌÜµ',
      market_state: 'Î∂àÌôïÏã§',
      past_comparison: '',
      emotion_source: ''
    },
    isStarred: false,
    actualResult: null,
    notes: ''
  });
  const [viewMode, setViewMode] = useState('dashboard'); // dashboard, record, list, insights
  const [filterEmotion, setFilterEmotion] = useState('all');
  const [filterPeriod, setFilterPeriod] = useState('all');

  // 90Ïùº Í∏∞Î≥∏ Î≥¥Í¥Ä, Î≥ÑÌëúÎäî ÏòÅÍµ¨ Î≥¥Í¥Ä
  const getRecordRetentionStatus = (record) => {
    if (record.isStarred) return { status: 'permanent', days: 'ÏòÅÍµ¨' };
    
    const recordDate = new Date(record.timestamp);
    const now = new Date();
    const daysPassed = Math.floor((now - recordDate) / (1000 * 60 * 60 * 24));
    const daysRemaining = Math.max(0, 90 - daysPassed);
    
    if (daysRemaining <= 10) return { status: 'warning', days: daysRemaining };
    if (daysRemaining <= 30) return { status: 'caution', days: daysRemaining };
    return { status: 'safe', days: daysRemaining };
  };

  // ÎßåÎ£å ÏòàÏ†ï Í∏∞Î°ù ÏïåÎ¶º
  useEffect(() => {
    const expiringRecords = tradingRecords.filter(record => {
      if (record.isStarred) return false;
      const retention = getRecordRetentionStatus(record);
      return retention.status === 'warning';
    });

    if (expiringRecords.length > 0) {
      // ÏïåÎ¶º ÌëúÏãú Î°úÏßÅ (Ïã§Ï†úÎ°úÎäî notification ÏãúÏä§ÌÖú ÏÇ¨Ïö©)
      console.log(`${expiringRecords.length}Í∞úÏùò Í∏∞Î°ùÏù¥ Í≥ß ÎßåÎ£åÎê©ÎãàÎã§.`);
    }
  }, [tradingRecords]);

  // ÏÉà Í∏∞Î°ù ÏãúÏûë
  const startNewRecord = () => {
    setCurrentRecord({
      id: Date.now(),
      timestamp: new Date(),
      symbol: '',
      action: '',
      emotion: '',
      emotionIntensity: 3,
      price: '',
      quantity: '',
      reasoning: '',
      metacognition: {
        confidence_level: 5,
        external_influence: 5,
        expected_result: 'Î≥¥ÌÜµ',
        market_state: 'Î∂àÌôïÏã§',
        past_comparison: '',
        emotion_source: ''
      },
      isStarred: false,
      actualResult: null,
      notes: ''
    });
    setIsRecording(true);
    setViewMode('record');
  };

  // Í∏∞Î°ù Ï†ÄÏû•
  const saveRecord = () => {
    if (!currentRecord.symbol || !currentRecord.action || !currentRecord.emotion) {
      alert('ÌïÑÏàò Ìï≠Î™©ÏùÑ Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setTradingRecords(prev => [currentRecord, ...prev]);
    setIsRecording(false);
    setViewMode('dashboard');
  };

  // Í∏∞Î°ù Î≥ÑÌëú ÌÜ†Í∏Ä
  const toggleStar = (recordId) => {
    setTradingRecords(prev => 
      prev.map(record => 
        record.id === recordId 
          ? { ...record, isStarred: !record.isStarred }
          : record
      )
    );
  };

  // Í∏∞Î°ù ÏÇ≠Ï†ú
  const deleteRecord = (recordId) => {
    if (window.confirm('Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      setTradingRecords(prev => prev.filter(record => record.id !== recordId));
    }
  };

  // ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
  const getStatistics = () => {
    const total = tradingRecords.length;
    const starred = tradingRecords.filter(r => r.isStarred).length;
    const byEmotion = Object.keys(EMOTIONS).reduce((acc, emotion) => {
      acc[emotion] = tradingRecords.filter(r => r.emotion === emotion).length;
      return acc;
    }, {});
    
    const expiringCount = tradingRecords.filter(record => {
      const retention = getRecordRetentionStatus(record);
      return retention.status === 'warning';
    }).length;

    return { total, starred, byEmotion, expiringCount };
  };

  const stats = getStatistics();

  // Î©îÌÉÄÏù∏ÏßÄ ÌïÑÎìú Î†åÎçîÎßÅ
  const renderMetacognitionField = (fieldKey, field) => {
    const value = currentRecord.metacognition[fieldKey];
    
    switch (field.type) {
      case 'range':
        return (
          <div key={fieldKey} style={{ marginBottom: '16px' }}>
            <label style={{
              ...typography.presets.body.small,
              color: typography.colors.muted,
              marginBottom: '8px',
              display: 'block'
            }}>
              {field.name} ({value}/{field.max})
            </label>
            <input
              type="range"
              min={field.min}
              max={field.max}
              value={value}
              onChange={(e) => setCurrentRecord(prev => ({
                ...prev,
                metacognition: {
                  ...prev.metacognition,
                  [fieldKey]: parseInt(e.target.value)
                }
              }))}
              style={{ width: '100%' }}
            />
            <div style={{
              ...typography.presets.caption,
              color: typography.colors.muted,
              marginTop: '4px'
            }}>
              {field.description}
            </div>
          </div>
        );
      
      case 'select':
        return (
          <div key={fieldKey} style={{ marginBottom: '16px' }}>
            <label style={{
              ...typography.presets.body.small,
              color: typography.colors.muted,
              marginBottom: '8px',
              display: 'block'
            }}>
              {field.name}
            </label>
            <select
              value={value}
              onChange={(e) => setCurrentRecord(prev => ({
                ...prev,
                metacognition: {
                  ...prev.metacognition,
                  [fieldKey]: e.target.value
                }
              }))}
              style={{
                width: '100%',
                padding: '8px 12px',
                borderRadius: '6px',
                border: `1px solid ${theme.colors.border}`,
                background: theme.colors.background,
                color: typography.colors.primary
              }}
            >
              {field.options.map(option => (
                <option key={option} value={option}>{option}</option>
              ))}
            </select>
            <div style={{
              ...typography.presets.caption,
              color: typography.colors.muted,
              marginTop: '4px'
            }}>
              {field.description}
            </div>
          </div>
        );
      
      case 'textarea':
        return (
          <div key={fieldKey} style={{ marginBottom: '16px' }}>
            <label style={{
              ...typography.presets.body.small,
              color: typography.colors.muted,
              marginBottom: '8px',
              display: 'block'
            }}>
              {field.name}
            </label>
            <textarea
              value={value}
              onChange={(e) => setCurrentRecord(prev => ({
                ...prev,
                metacognition: {
                  ...prev.metacognition,
                  [fieldKey]: e.target.value
                }
              }))}
              placeholder={field.description}
              rows={3}
              style={{
                width: '100%',
                padding: '8px 12px',
                borderRadius: '6px',
                border: `1px solid ${theme.colors.border}`,
                background: theme.colors.background,
                color: typography.colors.primary,
                resize: 'vertical'
              }}
            />
          </div>
        );
      
      default:
        return null;
    }
  };

  return (
    <div style={{
      background: theme.colors.surface,
      borderRadius: '16px',
      padding: '24px',
      border: `1px solid ${theme.colors.border}`,
      boxShadow: theme.shadows.md
    }}>
      {/* Ìó§Îçî */}
      <div style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
        marginBottom: '24px'
      }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
          <ChaessaemCharacter size="normal" darkMode={darkMode} />
          <div>
            <h2 style={{
              ...typography.presets.heading.h2,
              color: typography.colors.primary,
              margin: 0
            }}>
              üí≠ Í∞êÏ†ï Í∏∞Î∞ò Ìä∏Î†àÏù¥Îî© Í∏∞Î°ù
            </h2>
            <p style={{
              ...typography.presets.body.normal,
              color: typography.colors.muted,
              margin: '8px 0 0 0'
            }}>
              Ìà¨Ïûê Í∞êÏ†ïÍ≥º Î©îÌÉÄÏù∏ÏßÄÎ•º Í∏∞Î°ùÌïòÏó¨ Îçî ÎÇòÏùÄ Ìà¨ÏûêÏûêÍ∞Ä ÎêòÏñ¥Î≥¥ÏÑ∏Ïöî
            </p>
          </div>
        </div>
        
        {/* ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
        <div style={{ display: 'flex', gap: '8px' }}>
          {[
            { key: 'dashboard', label: 'üìä ÎåÄÏãúÎ≥¥Îìú' },
            { key: 'record', label: 'üìù Í∏∞Î°ùÌïòÍ∏∞' },
            { key: 'list', label: 'üìã Î™©Î°ù' },
            { key: 'insights', label: 'üß† Ïù∏ÏÇ¨Ïù¥Ìä∏' }
          ].map(item => (
            <button
              key={item.key}
              onClick={() => setViewMode(item.key)}
              style={{
                background: viewMode === item.key 
                  ? `linear-gradient(135deg, ${theme.colors.accent}, ${theme.colors.primary})`
                  : 'transparent',
                color: viewMode === item.key ? 'white' : theme.colors.accent,
                border: `2px solid ${theme.colors.accent}`,
                borderRadius: '8px',
                padding: '8px 16px',
                cursor: 'pointer',
                fontSize: '12px',
                fontWeight: '600'
              }}
            >
              {item.label}
            </button>
          ))}
        </div>
      </div>

      {/* ÎåÄÏãúÎ≥¥Îìú */}
      {viewMode === 'dashboard' && (
        <div>
          {/* ÌÜµÍ≥Ñ Ïπ¥Îìú */}
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
            gap: '16px',
            marginBottom: '24px'
          }}>
            <div style={{
              background: `${theme.colors.accent}15`,
              borderRadius: '12px',
              padding: '20px',
              textAlign: 'center',
              border: `1px solid ${theme.colors.accent}20`
            }}>
              <div style={{ fontSize: '32px', marginBottom: '8px' }}>üìù</div>
              <div style={{
                ...typography.presets.body.large,
                color: theme.colors.accent,
                fontWeight: '700',
                marginBottom: '4px'
              }}>
                {stats.total}
              </div>
              <div style={{
                ...typography.presets.caption,
                color: typography.colors.muted
              }}>
                Ï¥ù Í∏∞Î°ù Ïàò
              </div>
            </div>

            <div style={{
              background: `${theme.colors.warning}15`,
              borderRadius: '12px',
              padding: '20px',
              textAlign: 'center',
              border: `1px solid ${theme.colors.warning}20`
            }}>
              <div style={{ fontSize: '32px', marginBottom: '8px' }}>‚≠ê</div>
              <div style={{
                ...typography.presets.body.large,
                color: theme.colors.warning,
                fontWeight: '700',
                marginBottom: '4px'
              }}>
                {stats.starred}
              </div>
              <div style={{
                ...typography.presets.caption,
                color: typography.colors.muted
              }}>
                ÏòÅÍµ¨ Î≥¥Í¥Ä Í∏∞Î°ù
              </div>
            </div>

            <div style={{
              background: `${theme.colors.negative}15`,
              borderRadius: '12px',
              padding: '20px',
              textAlign: 'center',
              border: `1px solid ${theme.colors.negative}20`
            }}>
              <div style={{ fontSize: '32px', marginBottom: '8px' }}>‚ö†Ô∏è</div>
              <div style={{
                ...typography.presets.body.large,
                color: theme.colors.negative,
                fontWeight: '700',
                marginBottom: '4px'
              }}>
                {stats.expiringCount}
              </div>
              <div style={{
                ...typography.presets.caption,
                color: typography.colors.muted
              }}>
                ÎßåÎ£å ÏòàÏ†ï Í∏∞Î°ù
              </div>
            </div>

            <div style={{
              background: `${theme.colors.positive}15`,
              borderRadius: '12px',
              padding: '20px',
              textAlign: 'center',
              border: `1px solid ${theme.colors.positive}20`
            }}>
              <div style={{ fontSize: '32px', marginBottom: '8px' }}>üìà</div>
              <div style={{
                ...typography.presets.body.large,
                color: theme.colors.positive,
                fontWeight: '700',
                marginBottom: '4px'
              }}>
                {Math.round((stats.starred / Math.max(stats.total, 1)) * 100)}%
              </div>
              <div style={{
                ...typography.presets.caption,
                color: typography.colors.muted
              }}>
                Î≥ÑÌëú ÎπÑÏú®
              </div>
            </div>
          </div>

          {/* Í∞êÏ†ïÎ≥Ñ ÌÜµÍ≥Ñ */}
          <div style={{
            background: theme.colors.background,
            borderRadius: '12px',
            padding: '20px',
            marginBottom: '24px',
            border: `1px solid ${theme.colors.border}`
          }}>
            <h3 style={{
              ...typography.presets.heading.h3,
              color: typography.colors.primary,
              marginBottom: '16px'
            }}>
              üòä Í∞êÏ†ïÎ≥Ñ Í±∞Îûò ÌÜµÍ≥Ñ
            </h3>
            
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',
              gap: '12px'
            }}>
              {Object.entries(EMOTIONS).map(([key, emotion]) => (
                <div
                  key={key}
                  style={{
                    background: `${emotion.color}15`,
                    border: `1px solid ${emotion.color}30`,
                    borderRadius: '8px',
                    padding: '12px',
                    textAlign: 'center'
                  }}
                >
                  <div style={{
                    fontSize: '18px',
                    marginBottom: '4px'
                  }}>
                    {emotion.name}
                  </div>
                  <div style={{
                    ...typography.presets.body.normal,
                    color: emotion.color,
                    fontWeight: '700'
                  }}>
                    {stats.byEmotion[key] || 0}Ìöå
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Îπ†Î•∏ Í∏∞Î°ù ÏãúÏûë */}
          <div style={{
            background: `${theme.colors.positive}10`,
            borderRadius: '12px',
            padding: '24px',
            textAlign: 'center',
            border: `1px solid ${theme.colors.positive}20`
          }}>
            <h3 style={{
              ...typography.presets.heading.h3,
              color: typography.colors.primary,
              marginBottom: '16px'
            }}>
              üìù ÏÉà Í±∞Îûò Í∏∞Î°ùÌïòÍ∏∞
            </h3>
            
            <p style={{
              ...typography.presets.body.normal,
              color: typography.colors.muted,
              marginBottom: '20px'
            }}>
              ÏßÄÍ∏à Í≤ΩÌóòÌïòÍ≥† ÏûàÎäî Ìà¨Ïûê Í∞êÏ†ïÍ≥º ÏùòÏÇ¨Í≤∞Ï†ï Í≥ºÏ†ïÏùÑ Í∏∞Î°ùÌï¥Î≥¥ÏÑ∏Ïöî
            </p>
            
            <button
              onClick={startNewRecord}
              style={{
                background: `linear-gradient(135deg, ${theme.colors.positive}, ${theme.colors.accent})`,
                color: 'white',
                border: 'none',
                borderRadius: '12px',
                padding: '16px 32px',
                cursor: 'pointer',
                fontSize: '16px',
                fontWeight: '600'
              }}
            >
              üöÄ Í∏∞Î°ù ÏãúÏûëÌïòÍ∏∞
            </button>
          </div>
        </div>
      )}

      {/* Í∏∞Î°ùÌïòÍ∏∞ */}
      {viewMode === 'record' && (
        <div>
          <div style={{
            display: 'grid',
            gridTemplateColumns: '1fr 1fr',
            gap: '24px'
          }}>
            {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
            <div style={{
              background: theme.colors.background,
              borderRadius: '12px',
              padding: '20px',
              border: `1px solid ${theme.colors.border}`
            }}>
              <h3 style={{
                ...typography.presets.heading.h3,
                color: typography.colors.primary,
                marginBottom: '16px'
              }}>
                üìä Í±∞Îûò Ï†ïÎ≥¥
              </h3>
              
              <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                <div>
                  <label style={{
                    ...typography.presets.body.small,
                    color: typography.colors.muted,
                    marginBottom: '8px',
                    display: 'block'
                  }}>
                    Ï¢ÖÎ™© ÏΩîÎìú *
                  </label>
                  <input
                    type="text"
                    value={currentRecord.symbol}
                    onChange={(e) => setCurrentRecord(prev => ({...prev, symbol: e.target.value.toUpperCase()}))}
                    placeholder="AAPL, TSLA Îì±"
                    style={{
                      width: '100%',
                      padding: '12px 16px',
                      borderRadius: '8px',
                      border: `1px solid ${theme.colors.border}`,
                      background: theme.colors.surface,
                      color: typography.colors.primary
                    }}
                  />
                </div>

                <div>
                  <label style={{
                    ...typography.presets.body.small,
                    color: typography.colors.muted,
                    marginBottom: '8px',
                    display: 'block'
                  }}>
                    Í±∞Îûò ÌñâÎèô *
                  </label>
                  <div style={{
                    display: 'grid',
                    gridTemplateColumns: 'repeat(2, 1fr)',
                    gap: '8px'
                  }}>
                    {Object.values(TRADE_TYPES).map(type => (
                      <button
                        key={type.id}
                        onClick={() => setCurrentRecord(prev => ({...prev, action: type.id}))}
                        style={{
                          background: currentRecord.action === type.id 
                            ? `linear-gradient(135deg, ${type.color}, ${theme.colors.accent})`
                            : 'transparent',
                          color: currentRecord.action === type.id ? 'white' : type.color,
                          border: `2px solid ${type.color}`,
                          borderRadius: '8px',
                          padding: '12px',
                          cursor: 'pointer',
                          fontSize: '14px',
                          fontWeight: '600'
                        }}
                      >
                        {type.icon} {type.name}
                      </button>
                    ))}
                  </div>
                </div>

                <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px' }}>
                  <div>
                    <label style={{
                      ...typography.presets.body.small,
                      color: typography.colors.muted,
                      marginBottom: '8px',
                      display: 'block'
                    }}>
                      Í∞ÄÍ≤©
                    </label>
                    <input
                      type="number"
                      value={currentRecord.price}
                      onChange={(e) => setCurrentRecord(prev => ({...prev, price: e.target.value}))}
                      placeholder="100.00"
                      step="0.01"
                      style={{
                        width: '100%',
                        padding: '8px 12px',
                        borderRadius: '6px',
                        border: `1px solid ${theme.colors.border}`,
                        background: theme.colors.surface,
                        color: typography.colors.primary
                      }}
                    />
                  </div>
                  
                  <div>
                    <label style={{
                      ...typography.presets.body.small,
                      color: typography.colors.muted,
                      marginBottom: '8px',
                      display: 'block'
                    }}>
                      ÏàòÎüâ
                    </label>
                    <input
                      type="number"
                      value={currentRecord.quantity}
                      onChange={(e) => setCurrentRecord(prev => ({...prev, quantity: e.target.value}))}
                      placeholder="100"
                      style={{
                        width: '100%',
                        padding: '8px 12px',
                        borderRadius: '6px',
                        border: `1px solid ${theme.colors.border}`,
                        background: theme.colors.surface,
                        color: typography.colors.primary
                      }}
                    />
                  </div>
                </div>

                <div>
                  <label style={{
                    ...typography.presets.body.small,
                    color: typography.colors.muted,
                    marginBottom: '8px',
                    display: 'block'
                  }}>
                    Í±∞Îûò Í∑ºÍ±∞
                  </label>
                  <textarea
                    value={currentRecord.reasoning}
                    onChange={(e) => setCurrentRecord(prev => ({...prev, reasoning: e.target.value}))}
                    placeholder="Ïù¥ Í±∞ÎûòÎ•º Í≤∞Ï†ïÌïú Ïù¥Ïú†Î•º ÏûêÏÑ∏Ìûà Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî..."
                    rows={4}
                    style={{
                      width: '100%',
                      padding: '12px 16px',
                      borderRadius: '8px',
                      border: `1px solid ${theme.colors.border}`,
                      background: theme.colors.surface,
                      color: typography.colors.primary,
                      resize: 'vertical'
                    }}
                  />
                </div>
              </div>
            </div>

            {/* Í∞êÏ†ï Ï†ïÎ≥¥ */}
            <div style={{
              background: theme.colors.background,
              borderRadius: '12px',
              padding: '20px',
              border: `1px solid ${theme.colors.border}`
            }}>
              <h3 style={{
                ...typography.presets.heading.h3,
                color: typography.colors.primary,
                marginBottom: '16px'
              }}>
                üòä Í∞êÏ†ï ÏÉÅÌÉú *
              </h3>
              
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(2, 1fr)',
                gap: '8px',
                marginBottom: '16px'
              }}>
                {Object.values(EMOTIONS).map(emotion => (
                  <button
                    key={emotion.id}
                    onClick={() => setCurrentRecord(prev => ({...prev, emotion: emotion.id}))}
                    style={{
                      background: currentRecord.emotion === emotion.id 
                        ? `linear-gradient(135deg, ${emotion.color}, ${theme.colors.accent})`
                        : 'transparent',
                      color: currentRecord.emotion === emotion.id ? 'white' : emotion.color,
                      border: `2px solid ${emotion.color}`,
                      borderRadius: '8px',
                      padding: '8px 12px',
                      cursor: 'pointer',
                      fontSize: '12px',
                      fontWeight: '600'
                    }}
                  >
                    {emotion.name}
                  </button>
                ))}
              </div>

              {currentRecord.emotion && (
                <div>
                  <label style={{
                    ...typography.presets.body.small,
                    color: typography.colors.muted,
                    marginBottom: '8px',
                    display: 'block'
                  }}>
                    Í∞êÏ†ï Í∞ïÎèÑ: {currentRecord.emotionIntensity}/5
                  </label>
                  <input
                    type="range"
                    min="1"
                    max="5"
                    value={currentRecord.emotionIntensity}
                    onChange={(e) => setCurrentRecord(prev => ({...prev, emotionIntensity: parseInt(e.target.value)}))}
                    style={{ width: '100%' }}
                  />
                  <div style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    ...typography.presets.caption,
                    color: typography.colors.muted,
                    marginTop: '4px'
                  }}>
                    <span>ÏïΩÌï®</span>
                    <span>Î≥¥ÌÜµ</span>
                    <span>Í∞ïÌï®</span>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Î©îÌÉÄÏù∏ÏßÄ ÏÑπÏÖò */}
          <div style={{
            background: `${theme.colors.accent}10`,
            borderRadius: '12px',
            padding: '20px',
            marginTop: '24px',
            border: `1px solid ${theme.colors.accent}20`
          }}>
            <h3 style={{
              ...typography.presets.heading.h3,
              color: typography.colors.primary,
              marginBottom: '16px'
            }}>
              üß† Î©îÌÉÄÏù∏ÏßÄ Î≥¥Ï°∞ Ìï≠Î™©
            </h3>
            
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
              gap: '20px'
            }}>
              {Object.entries(METACOGNITION_FIELDS).map(([key, field]) => 
                renderMetacognitionField(key, field)
              )}
            </div>
          </div>

          {/* Ï†ÄÏû• Î≤ÑÌäº */}
          <div style={{
            display: 'flex',
            gap: '12px',
            justifyContent: 'center',
            marginTop: '24px'
          }}>
            <button
              onClick={() => setViewMode('dashboard')}
              style={{
                background: 'transparent',
                color: theme.colors.muted,
                border: `2px solid ${theme.colors.muted}`,
                borderRadius: '8px',
                padding: '12px 24px',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: '600'
              }}
            >
              Ï∑®ÏÜå
            </button>
            
            <button
              onClick={saveRecord}
              style={{
                background: `linear-gradient(135deg, ${theme.colors.positive}, ${theme.colors.accent})`,
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                padding: '12px 32px',
                cursor: 'pointer',
                fontSize: '16px',
                fontWeight: '600'
              }}
            >
              üíæ Í∏∞Î°ù Ï†ÄÏû•
            </button>
          </div>
        </div>
      )}

      {/* Î™©Î°ù */}
      {viewMode === 'list' && (
        <div>
          {/* ÌïÑÌÑ∞ */}
          <div style={{
            background: theme.colors.background,
            borderRadius: '12px',
            padding: '16px',
            marginBottom: '20px',
            border: `1px solid ${theme.colors.border}`,
            display: 'flex',
            gap: '16px',
            alignItems: 'center'
          }}>
            <div>
              <label style={{
                ...typography.presets.body.small,
                color: typography.colors.muted,
                marginRight: '8px'
              }}>
                Í∞êÏ†ï:
              </label>
              <select
                value={filterEmotion}
                onChange={(e) => setFilterEmotion(e.target.value)}
                style={{
                  padding: '6px 12px',
                  borderRadius: '6px',
                  border: `1px solid ${theme.colors.border}`,
                  background: theme.colors.surface,
                  color: typography.colors.primary
                }}
              >
                <option value="all">Ï†ÑÏ≤¥</option>
                {Object.values(EMOTIONS).map(emotion => (
                  <option key={emotion.id} value={emotion.id}>
                    {emotion.name}
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <label style={{
                ...typography.presets.body.small,
                color: typography.colors.muted,
                marginRight: '8px'
              }}>
                Í∏∞Í∞Ñ:
              </label>
              <select
                value={filterPeriod}
                onChange={(e) => setFilterPeriod(e.target.value)}
                style={{
                  padding: '6px 12px',
                  borderRadius: '6px',
                  border: `1px solid ${theme.colors.border}`,
                  background: theme.colors.surface,
                  color: typography.colors.primary
                }}
              >
                <option value="all">Ï†ÑÏ≤¥</option>
                <option value="week">ÏµúÍ∑º 1Ï£º</option>
                <option value="month">ÏµúÍ∑º 1Îã¨</option>
                <option value="3months">ÏµúÍ∑º 3Îã¨</option>
              </select>
            </div>
          </div>

          {/* Í∏∞Î°ù Î¶¨Ïä§Ìä∏ */}
          <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
            {tradingRecords
              .filter(record => filterEmotion === 'all' || record.emotion === filterEmotion)
              .filter(record => {
                if (filterPeriod === 'all') return true;
                const recordDate = new Date(record.timestamp);
                const now = new Date();
                const diffTime = now - recordDate;
                const diffDays = diffTime / (1000 * 60 * 60 * 24);
                
                switch (filterPeriod) {
                  case 'week': return diffDays <= 7;
                  case 'month': return diffDays <= 30;
                  case '3months': return diffDays <= 90;
                  default: return true;
                }
              })
              .map(record => {
                const emotion = EMOTIONS[record.emotion?.toUpperCase()];
                const tradeType = TRADE_TYPES[record.action?.toUpperCase()];
                const retention = getRecordRetentionStatus(record);
                
                return (
                  <div
                    key={record.id}
                    style={{
                      background: theme.colors.surface,
                      border: `1px solid ${theme.colors.border}`,
                      borderRadius: '12px',
                      padding: '16px',
                      position: 'relative'
                    }}
                  >
                    {/* Î≥¥Í¥Ä ÏÉÅÌÉú ÌëúÏãú */}
                    <div style={{
                      position: 'absolute',
                      top: '12px',
                      right: '12px',
                      display: 'flex',
                      gap: '8px',
                      alignItems: 'center'
                    }}>
                      {record.isStarred ? (
                        <span style={{
                          background: theme.colors.warning,
                          color: 'white',
                          padding: '4px 8px',
                          borderRadius: '12px',
                          fontSize: '10px',
                          fontWeight: '600'
                        }}>
                          ‚≠ê ÏòÅÍµ¨Î≥¥Í¥Ä
                        </span>
                      ) : (
                        <span style={{
                          background: retention.status === 'warning' ? theme.colors.negative :
                                   retention.status === 'caution' ? theme.colors.warning :
                                   theme.colors.positive,
                          color: 'white',
                          padding: '4px 8px',
                          borderRadius: '12px',
                          fontSize: '10px',
                          fontWeight: '600'
                        }}>
                          {retention.days}Ïùº ÎÇ®Ïùå
                        </span>
                      )}
                      
                      <button
                        onClick={() => toggleStar(record.id)}
                        style={{
                          background: 'transparent',
                          border: 'none',
                          cursor: 'pointer',
                          fontSize: '16px',
                          padding: '4px'
                        }}
                      >
                        {record.isStarred ? '‚≠ê' : '‚òÜ'}
                      </button>
                      
                      <button
                        onClick={() => deleteRecord(record.id)}
                        style={{
                          background: theme.colors.negative,
                          color: 'white',
                          border: 'none',
                          borderRadius: '4px',
                          padding: '4px 8px',
                          cursor: 'pointer',
                          fontSize: '10px'
                        }}
                      >
                        üóëÔ∏è
                      </button>
                    </div>

                    <div style={{
                      display: 'grid',
                      gridTemplateColumns: 'auto 1fr auto',
                      gap: '16px',
                      alignItems: 'center'
                    }}>
                      {/* Í±∞Îûò Ï†ïÎ≥¥ */}
                      <div>
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: '8px',
                          marginBottom: '8px'
                        }}>
                          <span style={{ fontSize: '20px' }}>
                            {tradeType?.icon}
                          </span>
                          <h4 style={{
                            ...typography.presets.heading.h4,
                            color: typography.colors.primary,
                            margin: 0
                          }}>
                            {record.symbol}
                          </h4>
                          <span style={{
                            background: tradeType?.color + '20',
                            color: tradeType?.color,
                            padding: '2px 8px',
                            borderRadius: '12px',
                            fontSize: '12px',
                            fontWeight: '600'
                          }}>
                            {tradeType?.name}
                          </span>
                        </div>
                        
                        <div style={{
                          ...typography.presets.body.small,
                          color: typography.colors.muted
                        }}>
                          {new Date(record.timestamp).toLocaleString()}
                        </div>
                        
                        {record.price && (
                          <div style={{
                            ...typography.presets.body.normal,
                            color: typography.colors.primary,
                            fontWeight: '600'
                          }}>
                            ${record.price} √ó {record.quantity}
                          </div>
                        )}
                      </div>

                      {/* Í∞êÏ†ï Ï†ïÎ≥¥ */}
                      <div>
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: '8px',
                          marginBottom: '8px'
                        }}>
                          <span style={{
                            background: emotion?.color + '20',
                            color: emotion?.color,
                            padding: '4px 12px',
                            borderRadius: '12px',
                            fontSize: '12px',
                            fontWeight: '600'
                          }}>
                            {emotion?.name} {record.emotionIntensity}/5
                          </span>
                        </div>
                        
                        <div style={{
                          ...typography.presets.body.small,
                          color: typography.colors.muted,
                          marginBottom: '8px'
                        }}>
                          ÌôïÏã†ÎèÑ: {record.metacognition.confidence_level}/10
                        </div>
                        
                        {record.reasoning && (
                          <div style={{
                            ...typography.presets.body.small,
                            color: typography.colors.secondary,
                            lineHeight: 1.4,
                            maxWidth: '300px',
                            overflow: 'hidden',
                            textOverflow: 'ellipsis',
                            whiteSpace: 'nowrap'
                          }}>
                            {record.reasoning}
                          </div>
                        )}
                      </div>

                      {/* Î©îÌÉÄÏù∏ÏßÄ ÏöîÏïΩ */}
                      <div style={{
                        ...typography.presets.caption,
                        color: typography.colors.muted,
                        textAlign: 'right',
                        minWidth: '120px'
                      }}>
                        <div>Ïô∏Î∂ÄÏòÅÌñ•: {record.metacognition.external_influence}/10</div>
                        <div>ÏòàÏÉÅÍ≤∞Í≥º: {record.metacognition.expected_result}</div>
                        <div>ÏãúÏû•ÏÉÅÌÉú: {record.metacognition.market_state}</div>
                      </div>
                    </div>
                  </div>
                );
              })}
          </div>

          {tradingRecords.length === 0 && (
            <div style={{
              textAlign: 'center',
              padding: '40px 20px',
              background: `${theme.colors.muted}10`,
              borderRadius: '12px',
              border: `1px dashed ${theme.colors.muted}`
            }}>
              <div style={{ fontSize: '48px', marginBottom: '16px' }}>üìù</div>
              <h4 style={{
                ...typography.presets.heading.h4,
                color: typography.colors.primary,
                marginBottom: '8px'
              }}>
                ÏïÑÏßÅ Í∏∞Î°ùÏù¥ ÏóÜÏñ¥Ïöî
              </h4>
              <p style={{
                ...typography.presets.body.normal,
                color: typography.colors.muted
              }}>
                Ï≤´ Î≤àÏß∏ Í±∞Îûò Í∞êÏ†ïÏùÑ Í∏∞Î°ùÌï¥Î≥¥ÏÑ∏Ïöî!
              </p>
            </div>
          )}
        </div>
      )}

      {/* Ïù∏ÏÇ¨Ïù¥Ìä∏ */}
      {viewMode === 'insights' && (
        <div>
          <div style={{
            textAlign: 'center',
            padding: '40px 20px',
            background: `${theme.colors.accent}10`,
            borderRadius: '12px',
            border: `1px solid ${theme.colors.accent}20`
          }}>
            <ChaessaemCharacter size="large" darkMode={darkMode} />
            <h3 style={{
              ...typography.presets.heading.h3,
              color: typography.colors.primary,
              marginTop: '16px',
              marginBottom: '12px'
            }}>
              üß† AI Ïù∏ÏÇ¨Ïù¥Ìä∏ Î∂ÑÏÑù
            </h3>
            <p style={{
              ...typography.presets.body.normal,
              color: typography.colors.muted,
              marginBottom: '20px'
            }}>
              Ï∂©Î∂ÑÌïú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏåìÏù¥Î©¥ Ï±ÑÏå§Ïù¥ ÎãπÏã†Ïùò Ìà¨Ïûê Ìå®ÌÑ¥ÏùÑ Î∂ÑÏÑùÌï¥ÎìúÎ¶¥Í≤åÏöî!<br/>
              Îçî ÎßéÏùÄ Í∏∞Î°ùÏùÑ ÏåìÏïÑÎ≥¥ÏÑ∏Ïöî.
            </p>
            
            <div style={{
              background: theme.colors.background,
              borderRadius: '8px',
              padding: '16px',
              marginTop: '20px'
            }}>
              <h4 style={{
                ...typography.presets.heading.h4,
                color: typography.colors.primary,
                marginBottom: '12px'
              }}>
                ÏòàÏÉÅ Î∂ÑÏÑù Ìï≠Î™© (10Í∞ú Í∏∞Î°ù Ïù¥ÏÉÅ Ïãú)
              </h4>
              
              <div style={{
                ...typography.presets.body.small,
                color: typography.colors.muted,
                textAlign: 'left',
                lineHeight: 1.6
              }}>
                ‚Ä¢ üí≠ Í∞êÏ†ï vs Í≤∞Í≥º Î∂ÑÏÑù: Ïñ¥Îñ§ Í∞êÏ†ïÏùº Îïå Îçî Ï¢ãÏùÄ ÏÑ±Í≥ºÎ•º ÎÇ¥ÎäîÏßÄ<br/>
                ‚Ä¢ üìä Í∞êÏ†ï ÏõêÏù∏ ÌÜµÍ≥Ñ: Ï£ºÎ°ú Ïñ¥Îñ§ ÏöîÏù∏Ïù¥ Í∞êÏ†ïÏùÑ Ïú†Î∞úÌïòÎäîÏßÄ<br/>
                ‚Ä¢ üéØ ÏûêÍ∏∞ Ïù∏Ïãù Ï†ïÌôïÎèÑ: ÏòàÏÉÅ Í≤∞Í≥ºÏôÄ Ïã§Ï†ú Í≤∞Í≥º ÎπÑÍµê<br/>
                ‚Ä¢ üß† Î©îÌÉÄÏù∏ÏßÄ Í∞úÏÑ† ÌåÅ: Í∞úÏù∏ÌôîÎêú Ìà¨Ïûê Ïã¨Î¶¨ Ï°∞Ïñ∏<br/>
                ‚Ä¢ üìà ÏµúÏ†Å Í±∞Îûò ÌÉÄÏù¥Î∞ç: ÎãπÏã†ÏóêÍ≤å ÎßûÎäî Í±∞Îûò Ìå®ÌÑ¥ Î∞úÍ≤¨
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default EmotionalTradingJournal; 